create database Customer;
use Customer;
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    location VARCHAR(255)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    brand VARCHAR(255)
);

CREATE TABLE Feedback (
    feedback_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    rating VARCHAR(10), -- Simple textual rating
    comments VARCHAR(255), -- Shorter text for comments
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);


CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    store_id INT,
    customer_id INT,
    quantity INT,
    sale_date DATE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (store_id) REFERENCES Stores(store_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Stores (
    store_id INT PRIMARY KEY,
    store_name VARCHAR(255),
    location VARCHAR(255)
);


INSERT INTO Customers (customer_id, name, email, location) VALUES 
(1, 'Sanika Saravade', 'sanika@example.com', 'Mumbai'),
(2, 'Sarvesh Malbari', 'sarvesh@example.com', 'Delhi'),
(3, 'Sakshi Sonawane', 'sakshi@example.com', 'Pune'),
(4, 'Pranjal Bendre', 'pranjal@example.com', 'Bangalore'),
(5, 'Chaitanya Ghutukude', 'chaitanya@example.com', 'Hyderabad'),
(6, 'Rahul Sharma', 'rahul.sharma@example.com', 'Chennai'),
(7, 'Priya Gupta', 'priya.gupta@example.com', 'Kolkata'),
(8, 'Amit Singh', 'amit.singh@example.com', 'Ahmedabad'),
(9, 'Sneha Reddy', 'sneha.reddy@example.com', 'Hyderabad'),
(10, 'Anil Mehta', 'anil.mehta@example.com', 'Jaipur'),
(11, 'Anjali Nair', 'anjali.nair@example.com', 'Kochi'),
(12, 'Rohan Verma', 'rohan.verma@example.com', 'Pune'),
(13, 'Neha Kumar', 'neha.kumar@example.com', 'Lucknow'),
(14, 'Karan Kapoor', 'karan.kapoor@example.com', 'Chandigarh'),
(15, 'Pooja Singh', 'pooja.singh@example.com', 'Indore'),
(16, 'Rajesh Iyer', 'rajesh.iyer@example.com', 'Chennai'),
(17, 'Divya Sharma', 'divya.sharma@example.com', 'Bhopal'),
(18, 'Vikas Agarwal', 'vikas.agarwal@example.com', 'Gurgaon'),
(19, 'Meena Rao', 'meena.rao@example.com', 'Nagpur'),
(20, 'Manoj Patil', 'manoj.patil@example.com', 'Nashik');
 
 
 
 INSERT INTO Products (product_id, product_name, brand) VALUES 
(1, 'Good Day Biscuits', 'Britannia'),
(2, 'Parle-G Biscuits', 'Parle'),
(3, 'Marie Gold', 'Britannia'),
(4, 'Hide & Seek', 'Parle'),
(5, 'Oreo', 'Cadbury'),
(6, 'Sunfeast Dark Fantasy', 'ITC'),
(7, 'Bourbon', 'Britannia'),
(8, 'Oreo', 'Cadbury'), 
(9, 'Jim Jam', 'Britannia'),
(10, 'Milk Bikis', 'Britannia');
UPDATE products
SET product_name = 'Milano', brand = 'Parle'
WHERE product_name = 'Oreo' AND brand = 'Cadbury';
UPDATE products
SET product_name = 'Oreo', brand = 'Cadbury'
WHERE product_id = 8;




 INSERT INTO Feedback (feedback_id, customer_id, product_id, rating, comments) VALUES
(1, 1, 1, 'Good', 'Tasty and crispy!'),
(2, 2, 2, 'Excellent', 'Always a favorite.'),
(3, 3, 3, 'Average', 'Not as good as before.'),
(4, 4, 4, 'Good', 'Nice chocolate flavor.'),
(5, 5, 5, 'Excellent', 'Loved the cream.'),
(6, 6, 6, 'Good', 'Great taste, but a bit pricey.'),
(7, 7, 7, 'Average', 'Decent for the price.'),
(8, 8, 8, 'Good', 'Kids love it!'),
(9, 9, 9, 'Good', 'Classic choice.'),
(10, 10, 10, 'Excellent', 'Perfect with milk.'),
(11, 11, 1, 'Average', 'Could be better.'),
(12, 12, 2, 'Good', 'Always a reliable choice.'),
(13, 13, 3, 'Excellent', 'Great for tea time.'),
(14, 14, 4, 'Good', 'Crunchy and tasty.'),
(15, 15, 5, 'Average', 'Not as creamy as expected.'),
(16, 16, 6, 'Excellent', 'Rich and delicious.'),
(17, 17, 7, 'Good', 'A good classic option.'),
(18, 18, 8, 'Excellent', 'Love the flavor.'),
(19, 19, 9, 'Good', 'A childhood favorite.'),
(20, 20, 10, 'Good', 'Perfect for kids.');

INSERT INTO Sales (sale_id, product_id, store_id, customer_id, quantity, sale_date) VALUES
(1, 1, 1, 1, 2, '2024-07-01'),
(2, 2, 2, 2, 3, '2024-07-02'),
(3, 3, 3, 3, 1, '2024-07-03'),
(4, 4, 4, 4, 4, '2024-07-04'),
(5, 5, 5, 5, 2, '2024-07-05'),
(6, 6, 6, 6, 3, '2024-07-06'),
(7, 7, 7, 7, 1, '2024-07-07'),
(8, 8, 8, 8, 5, '2024-07-08'),
(9, 9, 9, 9, 2, '2024-07-09'),
(10, 10, 10, 10, 4, '2024-07-10'),
(11, 1, 1, 11, 3, '2024-07-11'),
(12, 2, 2, 12, 1, '2024-07-12'),
(13, 3, 3, 13, 2, '2024-07-13'),
(14, 4, 4, 14, 4, '2024-07-14'),
(15, 5, 5, 15, 3, '2024-07-15'),
(16, 6, 6, 16, 1, '2024-07-16'),
(17, 7, 7, 17, 2, '2024-07-17'),
(18, 8, 8, 18, 4, '2024-07-18'),
(19, 9, 9, 19, 5, '2024-07-19'),
(20, 10, 10, 20, 2, '2024-07-20');

INSERT INTO Stores (store_id, store_name, location) VALUES
(1, 'Fresh Mart', 'Mumbai'),
(2, 'Daily Needs', 'Delhi'),
(3, 'Super Bazaar', 'Pune'),
(4, 'City Market', 'Bangalore'),
(5, 'Quick Shop', 'Hyderabad'),
(6, 'Mega Mart', 'Chennai'),
(7, 'Easy Day', 'Kolkata'),
(8, 'Hyper Market', 'Ahmedabad'),
(9, 'Smart Store', 'Jaipur'),
(10, 'Value Mart', 'Kochi');

 desc customers;
 desc products;
 desc feedback;
 desc sales;
 desc stores;

select *from customers;
select *from products;
select *from feedback; 
select *from sales;
 select *from stores;

 
 
-- SUBQUERIES 

-- 1. What feedback have we received for the product with product_id = 5?
SELECT comments, rating
FROM Feedback
WHERE product_id = 5;

-- 2. Get the names of customers who purchased products from 'Fresh Mart'
SELECT name 
FROM Customers 
WHERE customer_id IN (
    SELECT customer_id 
    FROM Sales 
    WHERE store_id = (SELECT store_id FROM Stores WHERE store_name = 'Fresh Mart')
);

-- 3.Identify the locations of stores that have sold products rated 'Good' by customers.
SELECT location 
FROM Stores 
WHERE store_id IN (
    SELECT store_id 
    FROM Sales 
    WHERE product_id IN (
        SELECT product_id 
        FROM Feedback 
        WHERE rating = 'Good'
    )
);
-- 4.Retrieve the store names where customer 'Sneha Reddy' made purchases
SELECT store_name 
FROM Stores 
WHERE store_id IN (
    SELECT store_id 
    FROM Sales 
    WHERE customer_id = (SELECT customer_id FROM Customers WHERE name = 'Sneha Reddy')
);

-- JOINS 

-- 1.  Retrieve all sales records, including the store details, even if there are no corresponding store details for some sales.
SELECT 
    Sales.sale_id, 
    Sales.product_id, 
    Sales.store_id, 
    Stores.store_name, 
    Sales.customer_id, 
    Sales.quantity, 
    Sales.sale_date
FROM 
    Sales
LEFT JOIN 
    Stores ON Sales.store_id = Stores.store_id;
    
    -- 2.Determine the possible combinations of customers and products
    SELECT 
    Customers.customer_id, 
    Customers.name AS customer_name, 
    Products.product_id, 
    Products.product_name
FROM 
    Customers
CROSS JOIN 
    Products;
    
    
    -- 3. List of Customers with Their Feedback on Products
    SELECT 
    Customers.name AS Customer_Name, 
    Products.product_name AS Product_Name, 
    Feedback.comments AS Feedback_Comments
FROM 
    Feedback
JOIN 
    Customers ON Feedback.customer_id = Customers.customer_id
JOIN 
    Products ON Feedback.product_id = Products.product_id;
    
    -- 4. Show the total quantity sold per store, including stores with no sales.

   SELECT Stores.store_id, Stores.store_name, Stores.location, SUM(Sales.quantity) AS total_quantity_sold
FROM Sales
RIGHT JOIN Stores ON Sales.store_id = Stores.store_id
GROUP BY Stores.store_id, Stores.store_name, Stores.location;

	
    -- VIEWS
    CREATE VIEW SalesView AS
SELECT 
    sale_id, 
    product_id, 
    store_id, 
    customer_id, 
    quantity, 
    sale_date
FROM 
    Sales;
    
    select *from salesview;
    
    CREATE VIEW storeView AS
SELECT 
    store_id, 
    store_name, 
    location
FROM 
    Stores;
    select *from storeview;







 
 
 

